@startuml

abstract class Product{
    use():void
}
class ProductA{
    use():void
}
class ProductB{
    use():void
}
class Factory{
createProduct(String):Product
}

ProductA .up.|> Product
ProductB .up.|> Product


Factory .up.> ProductB
Factory .up.> ProductA
note as factory
if (arg == "A") {
    return new ProductA();
} else if (arg == "B") {
    return new ProductB();
}
end note
Factory .up. factory

note as 分析
    1. 将对象的创建和对象本身业务处理分离可以降低系统的耦合度，使得两者修改起来都相对容易。
    2. 在调用工厂类的工厂方法时，由于工厂方法是静态方法，使用起来很方便，可通过类名直接调用，而且只需要传入一个简单的参数即可，
        在实际开发中，还可以在调用时将所传入的参数保存在XML等格式的配置文件中，修改参数时无须修改任何源代码。
    3. 简单工厂模式最大的问题在于工厂类的职责相对过重，增加新的产品需要修改工厂类的判断逻辑，这一点与开闭原则是相违背的。
    4. 简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。
end note

@enduml