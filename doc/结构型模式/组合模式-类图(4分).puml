@startuml
note as description
组合模式的实现根据所实现的接口区别分为两种形式：安全式和透明式
组合模式包含以下主要角色。
抽象构件（Component）角色：它的主要作用是为树叶构件和树枝构件声明公共接口，并实现它们的默认行为。在透明式的组合模式中抽象构件还声明访问和管理子类的接口；在安全式的组合模式中不声明访问和管理子类的接口，管理工作由树枝构件完成。
树叶构件（Leaf）角色：是组合中的叶节点对象，它没有子节点，用于实现抽象构件角色中 声明的公共接口。
树枝构件（Composite）角色：是组合中的分支节点对象，它有子节点。它实现了抽象构件角色中声明的接口，它的主要作用是存储和管理子部件，通常包含 Add()、Remove()、GetChild() 等方法。
end note

package security{
interface Component{
+ printDescription():void;输出组件名称
}

class TreeBranch{
- List<Component> childComponent
- String name
+ <Construction> TreeBranch(String name):void
+ addChild(Component child):void;添加子组件
+ removeChild(ind childIndex):void;删除子组件
+ getChild():List<Component>;获取所有子组件
+ printDescription():void;输出组件的自身结构
}

class Leaf{
- List<Component> childComponent
- String name
+ <Construction> Leaf(String name):void
+ printDescription():void;输出组件的自身结构--即叶子对象的名称
}

TreeBranch --|> Component
Leaf --|> Component
}

package Transparent{
abstract Component1{
+ addChild(Component child):void;添加子组件;默认抛出UnsupportedOperationException
+ removeChild(ind childIndex):void;删除子组件,默认抛出UnsupportedOperationException
+ getChild():List<Component>;获取所有子组件,默认抛出UnsupportedOperationException
+ printDescription():void;输出组件的自身结构,默认抛出UnsupportedOperationException
}

class TreeBranch1{
- List<Component> childComponent
- String name
+ <Construction> TreeBranch(String name):void
+ addChild(Component child):void;添加子组件
+ removeChild(ind childIndex):void;删除子组件
+ getChild():List<Component>;获取所有子组件
+ printDescription():void;输出组件的自身结构
}

class Leaf1{
- List<Component> childComponent
- String name
+ <Construction> Leaf(String name):void
+ printDescription():void;输出组件的自身结构--即叶子对象的名称
}

TreeBranch1 ..|> Component1
Leaf1 ..|> Component1
}
@enduml