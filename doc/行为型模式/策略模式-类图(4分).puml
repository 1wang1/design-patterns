@startuml
note as command
策略模式的主要角色如下。
抽象策略（Strategy）类：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。
具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现。
环境（Context）类：持有一个策略类的引用，最终给客户端调用。
end note

abstract Strategy{
// 抽象策略
+ strategyMethod():void
}

class ConcreteStrategyA{
// 具体策略A
+ strategyMethod():void
}

class ConcreteStrategyB{
// 具体策略B
+ strategyMethod():void
}

ConcreteStrategyA .up.|> Strategy
ConcreteStrategyB .up.|> Strategy

class Context{
// 环境类
- strategy:Strategy
+ get/setStrategy():void
+ strategyMethod():void
}

Strategy -right-o Context

note as contextCode
public void strategyMethod(){
    strategy.strategyMethod();
}
end note

contextCode .. Context


@enduml