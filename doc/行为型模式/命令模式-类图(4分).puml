@startuml
note as command
命令模式包含以下主要角色。
1.抽象命令类（Command）角色：声明执行命令的接口，拥有执行命令的抽象方法 execute()。
2.具体命令角色（Concrete Command）角色：是抽象命令类的具体实现类，它拥有接收者对象，并通过调用接收者的功能来完成命令要执行的操作。
3.实现者/接收者（Receiver）角色：执行命令功能的相关操作，是具体命令对象业务的真正实现者。
4.调用者/请求者（Invoker）角色：是请求的发送者，它通常拥有很多的命令对象，并通过访问命令对象来执行相关请求，它不直接访问接收者。
end note
class Command{
// 抽象命令角色
- command:Command
+ Invoker(Command command)
+ setCommand(Command command):void
+ cell():void
}
class ConcreteCommandA{
// 具体命令角色
- receiver:ReceiverA
+ execute():void
}

class ConcreteCommandB{
// 具体命令角色
- receiver:ReceiverB
+ execute():void
}

class ReceiverA{
// 接受者/实现者
+ action():void
}

class ReceiverB{
// 接受者/实现者
+ action():void
}

class Invoker{
// 请求者/调用者
+ oprationB():void
}


ConcreteCommandA --|> Command
ConcreteCommandB --|> Command
ReceiverA --o ConcreteCommandA
ReceiverB --o ConcreteCommandB

Command --o Invoker

note as invokerCode
+ call(){
    command.execute()
}
end note
invokerCode .right. Invoker

note as ConcreteCommandCode
+ execute(){
    receiver.action()
}
end note
ConcreteCommandCode .right. ConcreteCommandA

@enduml